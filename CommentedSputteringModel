#imports
import pygame
from pygame.locals import *
import random, math, sys, time
pygame.init()
Surface = pygame.display.set_mode((800,600), pygame.FULLSCREEN)

global color
blue =  (76,247,219)
red = (254,27,7)
yellow = (255,255,0)
white = (255,255,255)
purple = (194,14,213)
copper = (184, 115,51)
silver = (128,128,128)
color = blue

#variables
global triggered
triggered = 1002
ECirclesFree = []
Circles = []
ECircles = [] 
Tcircles = []
ML = []
MR = []
sqrt = math.sqrt

for x in range(0,400): #This covers the x and y trajectory for the leftward magnetic field
    HalfCircleYLeft = (math.sqrt(200**2-(int(x)-200)**2)+50)
    ML.append(HalfCircleYLeft)
for x in range(400,800): #This covers the x and y trajectory for the rightward magnetic field
    HalfCircleY_Right = (math.sqrt(200**2-(int(x)-600)**2)+50)
    MR.append(HalfCircleY_Right)


class Circle:
    def __init__(self): #Setting up paraameters for atoms
        self.radius = 10
        self.x = random.randint(self.radius, 800-self.radius)
        self.y = random.randint(50+self.radius, 550-self.radius) #100 in the rand int so ball doesnt get stuck in the red bar, making a shower of red balls
        self.speedx = 0.5*(random.random()+1.0)+3
        self.speedy = 0.5*(random.random()+1.0)+3
        self.numCol = 0
        self.triggered = 1002
        self.add = 0
class ECircle:
    def __init__(self): #Setting up parameters for electrons
        self.radius = 4
        self.x = random.randint(self.radius, 800-self.radius)
        self.y = random.randint(50+self.radius, 500-self.radius)
        self.speedx = 0.5*(random.random()+1.0)+6
        self.speedy = 0.5*(random.random()+1.0)+6
        self.color = blue
    def drawE(self):
        #This draws the ECircles/electrons       
        pygame.draw.circle(Surface,self.color,(int(self.x),int(self.y)),self.radius) #draws individual blue circles
class Tcircle:
    def __init__(self):
        self.radius = 5
        self.x = (lastTop) #this makes it so that it spawns in at the exact point hwere the ball hit
        self.y = 50 #50 for spawn at bottom of red bar
        self.speedx = 0 #no horizontal movement 
        self.speedy = 0.5 #set movement speed, helpful for no midair grouping
    def drawT(self):
        pygame.draw.circle(Surface,copper,(int(self.x),int(self.y)),self.radius) #draws individual red circles

#creating our atoms and electrons
for x in range(150):
    ECirclesFree.append(ECircle())
for x in range(10):
    Circles.append(Circle())

def main():
    #An infinite loop
    while True:
        #first check if you hit esc
            GetInput()
        #changes the position of the ball via incrementing
            Move()
            MoveE()
        #is it going to collide with anything?
            CollisionDetect()
            CollisionDetectFree()
        #draw the balls
            Draw() 
def Circle(ECircleNew,Circle,startingIncrement):
    #Creates a new elctron with a minor difference in position
    ball = ECircle()
    ball.radius = ECircleNew.radius
    ball.x = ECircleNew.x + startingIncrement
    ball.speedx = ECircleNew.speedx
    ball.speedy = ECircleNew.speedy
    ball.x += startingIncrement
    if ball.x in range(0,399):    
        ball.y = ML[ball.x]
    if ball.x in range(398,800):
        ball.y = MR[(ball.x-398)]
    if ball.x > 800:
        ball.x = 0
        ball.y = ML[ball.x]
    ball.color = blue
    #adding to list of electrons
    ECircles.append(ball)
def addECircleFree(r,x,y,sX,sY,Circle):
    #Creates a new elctron with a minor difference in position
    leftX = Circle.x - Circle.radius+2
    rightX = Circle.x + Circle.radius+2
    upY = Circle.y - Circle.radius+2
    downY = Circle.y + Circle.radius+2
    inc = 10
    ball = ECircle()
    ball.radius = r
    ball.x = x+inc
    ball.y = y+inc
    done = True 
    #making sure wwe dont spawn on top of another atom
    while done:
        if ball.x >= leftX and ball.x <= rightX and ball.y >= upY and ball.y <= downY:
            ball.x+=1
            ball.y+=1
        else:
            if ball.y > 650:
                ball.y = 625
            done = False
    ball.speedx = sX
    ball.speedy = sY
    #adding to list
    ECirclesFree.append(ball)
def deleteECircle(ball): 
    #removes a ball form the list
    ECircles.remove(ball)
def CircleCollide(C1,C2):
    #makes things bouunce of at the correct angle
    XSpeed = 0
    YSpeed = 0
    C1Speed = math.sqrt((C1.speedx**2)+(C1.speedy**2))
    XDiff = -(C1.x-C2.x)
    YDiff = -(C1.y-C2.y)
    if XDiff > 0:
        if YDiff > 0:
            Angle = math.degrees(math.atan(YDiff/XDiff))
            XSpeed = -C1Speed*math.cos(math.radians(Angle))
            YSpeed = -C1Speed*math.sin(math.radians(Angle))
        elif YDiff < 0:
            Angle = math.degrees(math.atan(YDiff/XDiff))
            XSpeed = -C1Speed*math.cos(math.radians(Angle))
            YSpeed = -C1Speed*math.sin(math.radians(Angle))
    elif XDiff < 0:
        if YDiff > 0:
            Angle = 180 + math.degrees(math.atan(YDiff/XDiff))
            XSpeed = -C1Speed*math.cos(math.radians(Angle))
            YSpeed = -C1Speed*math.sin(math.radians(Angle))
        elif YDiff < 0:
            Angle = -180 + math.degrees(math.atan(YDiff/XDiff))
            XSpeed = -C1Speed*math.cos(math.radians(Angle))
            YSpeed = -C1Speed*math.sin(math.radians(Angle))
    elif XDiff == 0:
        if YDiff > 0:
            Angle = -90
        else:
            Angle = 90
        XSpeed = C1Speed*math.cos(math.radians(Angle))
        YSpeed = C1Speed*math.sin(math.radians(Angle))
    elif YDiff == 0:
        if XDiff < 0:
            Angle = 0
        else:
            Angle = 180
        XSpeed = C1Speed*math.cos(math.radians(Angle))
        YSpeed = C1Speed*math.sin(math.radians(Angle))
    C1.speedx = XSpeed
    C1.speedy = YSpeed
def checkInArray(x,list):
    #checks if a value is in an array
    bol = False
    for y in list:
        if x==y:
            bol = True
    return bol
def Move(): 
    #moves circles along their respective paths
    factor = 0
    for Circle in Circles:
        if Circle.numCol % 2 == 0:
            factor = 5
        else:
            factor = 0
        Circle.x += Circle.speedx
        Circle.y += Circle.speedy
    

    for Tcircle in Tcircles: #Red circles stop when they hit the target
        Tcircle.y += Tcircle.speedy
        if Tcircle.y >= 550:
            Tcircle.speedy = 0
        for Tcircle2 in Tcircles:
            if Tcircle != Tcircle2:
                if math.sqrt(((Tcircle.x-Tcircle2.x)**2)+((Tcircle.y-Tcircle2.y)**2)) <= (Tcircle.radius+Tcircle2.radius):
                    Tcircle.speedy = 0
def MoveE():
    #moves electrons along the arc
    for ECircle in ECircles:
        if int(ECircle.x) in range(0,399):    
            ECircle.x+=1   
            ECircle.y = ML[int(ECircle.x)]
        if int(ECircle.x) in range(398,800):
            ECircle.x+=1 
            if int(ECircle.x) >= 798:
                ECircle.x=0
            if int(ECircle.x) > 397:
                ECircle.y = MR[(int(ECircle.x)-398)] 
    for ECircleFree in ECirclesFree:
        ECircleFree.x += ECircleFree.speedx
        ECircleFree.y += ECircleFree.speedy
def CollisionDetect(): #turns balls around
    global lastTop
    for Circle in Circles:
        if Circle.x < Circle.radius or Circle.x > 800-Circle.radius:
            Circle.speedx *= -1 
        if Circle.y < Circle.radius+50: 
            
            if Circle.numCol % 2 != 0:
                lastTop = int(Circle.x) #lastTop is changed
                #Circle.speedx = 0
                #Circle.speedy = 0
                if Circle.add == 0:          
                    Tcircles.append(Tcircle())#adds another circle
                    Circle.add = 1 
            
            Circle.speedy *= -1    
        if Circle.y > 550-Circle.radius:
            Circle.speedy *= -1
    
    for ECircle in ECircles:
        if ECircle.x < ECircle.radius or ECircle.x > 800-ECircle.radius:
            ECircle.speedx *= -1 
        if ECircle.y < ECircle.radius+50: #red rectangle is hit
            ECircle.speedy *= -1
        if ECircle.y > 550-ECircle.radius:
            ECircle.speedy *= -1
   
    for Circle in Circles:
        for Circle2 in Circles:
            if Circle != Circle2:
                '''
                if Circle.add == 1 and Circle2.add == 1:  
                    if math.sqrt(((Circle.x-Circle2.x)**2)+((Circle.y-Circle2.y)**2)) <= (Circle.radius+Circle2.radius):
                        Circle2.speedy = 0
                        Circle2.speedx = 0
                '''
               
                if math.sqrt(((Circle.x-Circle2.x)**2)+((Circle.y-Circle2.y)**2)) <= (Circle.radius+Circle2.radius):
                        CircleCollide(Circle,Circle2)
    
    
    
    for ECircle in ECircles:     
        for ECircle2 in ECircles:

            if ECircle != ECircle2:
                if math.sqrt(((ECircle.x-ECircle2.x)**2)+((ECircle.y-ECircle2.y)**2)) <= (ECircle.radius+ECircle2.radius):
                    CircleCollide(ECircle,ECircle2)
    
    for Circle in Circles:
        for ECircle in ECircles:
            if math.sqrt(((Circle.x-ECircle.x)**2)+((Circle.y-ECircle.y)**2)) <= (Circle.radius+ECircle.radius):
                CircleCollide(ECircle,Circle)
                CircleCollide(Circle,ECircle)
                if Circle.numCol % 2 == 0:
                    addECircle(ECircle, Circle,random.randint(5,40))
                    Circle.speedy = -2.5
                else:
                    deleteECircle(ECircle)
                    if Circle.add == 1:
                        Circle.y += 2
                        Circle.speedx = 0.5*(random.random()+1.0)
                        Circle.speedy = 0.5*(random.random()+1.0)
                        Circle.add = 0
                Circle.numCol = Circle.numCol + 1
                Circle.triggered = 0 
def addECircle(ECircle,Circle,startingIncrement):
    #adds a new electron to the arc
    ball = ECircle
    ball.x +=startingIncrement
    ball.y += startingIncrement
    ECircles.append(ball)
def CollisionDetectFree():
    #detects if electrons are colliding with other objects
    for ECircleFree in ECirclesFree:
        
        if int(ECircleFree.x) in range (0,399):
            
            if int(ECircleFree.y) - int(ML[int(ECircleFree.x)]) < 3 and int(ECircleFree.y) - int(ML[int(ECircleFree.x)]) > -3:
                ECircles.append(ECircleFree)
                ECirclesFree.remove(ECircleFree)
        if int(ECircleFree.x) in range (400,800):
            if int(ECircleFree.y) - int(MR[int(ECircleFree.x)-400]) < 3 and int(ECircleFree.y) - int(MR[int(ECircleFree.x)-400]) > -3:
                ECircles.append(ECircleFree)
                ECirclesFree.remove(ECircleFree)
    for ECircleFree in ECirclesFree:
        if ECircleFree.x < ECircleFree.radius or ECircleFree.x > 800-ECircleFree.radius:
            ECircleFree.speedx *= -1 
        if ECircleFree.y < ECircleFree.radius+50: #red rectangle is hit
            ECircleFree.speedy *= -1
        if ECircleFree.y > 550-ECircleFree.radius:
            ECircleFree.speedy *= -1

    for Circle in Circles:
        for ECircleFree in ECirclesFree:
            if math.sqrt(((Circle.x-ECircleFree.x)**2)+((Circle.y-ECircleFree.y)**2)) <= (Circle.radius+ECircleFree.radius):
                CircleCollide(ECircleFree,Circle)
                CircleCollide(Circle,ECircleFree)
                if Circle.numCol % 2 == 0:
                    addECircleFree(ECircleFree.radius,ECircleFree.x,ECircleFree.y,ECircleFree.speedx,ECircleFree.speedy, Circle)
                    Circle.speedy = -2.5
                else:
                    ECirclesFree.remove(ECircleFree)
                    if Circle.add == 1:
                        Circle.y += 2
                        Circle.speedx = 0.5*(random.random()+1.0)
                        Circle.speedy = 0.5*(random.random()+1.0)
                        Circle.add = 0
                Circle.numCol = Circle.numCol + 1
                Circle.triggered = 0 
def Draw():
    #draws everything
    factor = 1
    Surface.fill((0,0,0))
    pygame.draw.rect(Surface, copper, (0, 0, 800, 50)) #draws red bar
    pygame.draw.rect(Surface, silver, (0,550, 800, 50)) #draws green bar
    #pygame.draw.rect(Surface, green, (100,50, 200, 75)) #draws yellow bar
    #pygame.draw.rect(Surface, green, (500,50, 200, 75)) #draws yellow bar
    for x in range(0,400):
        pygame.draw.line(Surface,white,(x, ML[x]), (x, ML[x]), 1)
    for x in range(400,800):
        pygame.draw.line(Surface,white,(x, MR[(x-400)]), (x, MR[(x-400)]), 1)

    for Circle in Circles:
        if Circle.numCol % 2 == 0:
            if Circle.triggered < 4:
                Circle.triggered += 1
                color = white 
            else:
                color = purple
        else:
            color = red
            
        #print (color)
        pygame.draw.circle(Surface,color,(int(Circle.x),int(Circle.y)),Circle.radius) #draws individual blue circles
        factor = 0
        label()
    for ECircle in ECircles:
        ECircle.drawE()
    for ECircleFree in ECirclesFree:
        pygame.draw.circle(Surface,blue,(int(ECircleFree.x),int(ECircleFree.y)),ECircleFree.radius) #draws individual blue circles

    for Tcircle in Tcircles:
        Tcircle.drawT()
    pygame.display.flip()
def GetInput():
    #checking for pressed keys
    keystate = pygame.key.get_pressed()
    for event in pygame.event.get():
        #if you hit esc...
        if event.type == QUIT or keystate[K_ESCAPE]: #if Esc is pressed, quit window
            #quit program
            pygame.quit(); sys.exit()
        #if you hit "u", everyting speeds up
        if keystate[K_u]:
            for ECircle in ECircles:
                ECircle.speedx += 2
                ECircle.speedy += 2
            for Circle in Circles:
                Circle.speedx += 2
                Circle.speedy += 2

#label generating methods
def text_objects(text, font):
    textSurface = font.render(text, True, white)
    return textSurface, textSurface.get_rect()
def message_display(text,x,y):
    largeText = pygame.font.Font('freesansbold.ttf',25)
    TextSurf, TextRect = text_objects(text, largeText)
    
    TextRect.center = (x,y)
    Surface.blit(TextSurf, TextRect)
def label():
    message_display('Substrate: Silicon',400, 575)
    message_display("Target: Copper", 400, 25)
    


#loop
if __name__ == '__main__': main()
